services:
  opensearch:
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION}
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - DISABLE_SECURITY_PLUGIN=true           # <- desactiva Security Plugin (dev)
      - DISABLE_INSTALL_DEMO_CONFIG=true       # <- evita el instalador del plugin
      - OPENSEARCH_JAVA_OPTS=-Xms2g -Xmx2g
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile:  { soft: 65536, hard: 65536 }
    ports:
      - "9200:9200"
      - "9600:9600"
    volumes:
      - ./storage/os:/usr/share/opensearch/data
    networks: [ragnet]
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:9200/_cluster/health"]
      interval: 20s
      timeout: 5s
      retries: 10
      start_period: 40s

  dashboards:
    image: opensearchproject/opensearch-dashboards:${OPENSEARCH_VERSION}
    container_name: os-dashboards
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
      - DISABLE_SECURITY_DASHBOARDS_PLUGIN=true   # <- alinea con nodo sin seguridad
      - SERVER_HOST=0.0.0.0
    depends_on: [opensearch]
    ports:
      - "5601:5601"
    networks: [ragnet]

  mysql:
    image: mysql:8.0
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./storage/mysql:/var/lib/mysql
    networks: [ragnet]
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-uroot", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag-api
    environment:
      # OpenSearch
      - OPENSEARCH_HOST=${OPENSEARCH_HOST}
      - OPENSEARCH_INDEX=${OPENSEARCH_INDEX}
      - OPENSEARCH_KNN_SPACE=${OPENSEARCH_KNN_SPACE}
      - OPENSEARCH_EMB_DIM=${OPENSEARCH_EMB_DIM}
      # MySQL (nombres compatibles con tu config.py)
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DB=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      # Gemini/Azure (compat con tu config.py)
      - GEMINI_API_KEY=${GOOGLE_API_KEY}
      - GEMINI_EMBED_MODEL=${GEMINI_EMBED_MODEL}
      - GEMINI_MODEL=${GEMINI_GEN_MODEL}
      - AZURE_FORMREC_ENDPOINT=${AZURE_FR_ENDPOINT}
      - AZURE_FORMREC_KEY=${AZURE_FR_KEY}
      # App
      - FINAL_PASAGES=${FINAL_PASAGES}
      - MIN_EVIDENCE=${MIN_EVIDENCE}
      - MIN_SCORE=${MIN_SCORE}
    volumes:
      - ./app:/app/app
      - ./scripts:/app/scripts
      - ./tests:/app/tests
      - ./data:/app/data
      - ./storage:/app/storage
    ports:
      - "${PORT_API}:8000"
    command: python -m uvicorn app.api:app --host 0.0.0.0 --port 8000 --reload
    networks: [ragnet]
    healthcheck:
      # Usa Python en vez de curl (python:3.11-slim no trae curl)
      test: ["CMD-SHELL", "python -c \"import urllib.request,sys; sys.exit(0) if urllib.request.urlopen('http://localhost:8000/health', timeout=5).status==200 else sys.exit(1)\""]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s
    depends_on:
      opensearch:
        condition: service_healthy
      mysql:
        condition: service_healthy

  ui:
    image: python:3.11-slim
    container_name: rag-ui
    working_dir: /app
    environment:
      - RAG_API_URL=http://api:8000
      - GRADIO_SERVER_NAME=0.0.0.0
      - GRADIO_SERVER_PORT=7860
    volumes:
      - ./ui:/app/ui
      - ./requirements.ui.txt:/app/requirements.ui.txt
    command: /bin/sh -lc "pip install --no-cache-dir -r requirements.ui.txt && python ui/gradio_app.py"
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "7860:7860"
    networks: [ragnet]

networks:
  ragnet:
    driver: bridge
