version: "3.9"

services:
  opensearch:
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION}
    container_name: opensearch
    environment:
      - discovery.type=single-node
      - plugins.security.disabled=true
      - OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g   # Heap más bajo para Docker Desktop
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile:  { soft: 65536, hard: 65536 }
    ports:
      - "9200:9200"
      - "9600:9600"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=2s | grep -qE '\"status\":\"(yellow|green)\"'"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [ ragnet ]
    volumes:
      - osdata:/usr/share/opensearch/data   # Volumen nombrado (estable en Windows)

  dashboards:
    image: opensearchproject/opensearch-dashboards:${OPENSEARCH_VERSION}
    container_name: os-dashboards
    environment:
      - OPENSEARCH_HOSTS=["http://opensearch:9200"]
    depends_on:
      opensearch:
        condition: service_healthy
    ports:
      - "5601:5601"
    networks: [ ragnet ]

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
    command: --default-authentication-plugin=mysql_native_password
    ports:
      - "3306:3306"   # Si ya usas 3306 en host, cámbialo por "13306:3306"
    volumes:
      - ./storage/mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u$${MYSQL_USER} -p$${MYSQL_PASSWORD} --silent"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [ ragnet ]

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag-api
    environment:
      # OpenSearch
      - OPENSEARCH_HOST=${OPENSEARCH_HOST}
      - OPENSEARCH_INDEX=${OPENSEARCH_INDEX}
      - OPENSEARCH_KNN_SPACE=${OPENSEARCH_KNN_SPACE}
      - OPENSEARCH_EMB_DIM=${OPENSEARCH_EMB_DIM}
      # MySQL
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_DB=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASS=${MYSQL_PASSWORD}
      # Gemini
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - GEMINI_EMBED_MODEL=${GEMINI_EMBED_MODEL}
      - GEMINI_GEN_MODEL=${GEMINI_GEN_MODEL}
    depends_on:
      opensearch:
        condition: service_healthy
      mysql:
        condition: service_healthy
    ports:
      - "${PORT_API}:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health | grep -q '\"status\":\"ok\"'"]
      interval: 10s
      timeout: 5s
      retries: 60
    networks: [ ragnet ]
    # Volúmenes útiles si estás desarrollando en vivo:
    volumes:
      - ./app:/app/app

  ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: rag-ui
    environment:
      - RAG_API_URL=http://api:8000
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "8501:8501"
    networks: [ ragnet ]
    volumes:
      - ./ui:/app/ui

  toolbox:
    build:
      context: .
      dockerfile: Dockerfile.toolbox
    container_name: toolbox
    depends_on:
      api:
        condition: service_healthy
    networks: [ ragnet ]
    environment:
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
    # Útil para ejecutar diagnósticos y scripts dentro de la red del compose
    command: ["bash", "-lc", "echo 'toolbox listo. Ejecuta: docker exec -it toolbox bash' && sleep infinity"]

networks:
  ragnet:
    driver: bridge

volumes:
  osdata:
